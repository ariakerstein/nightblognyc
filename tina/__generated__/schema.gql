# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  nav(relativePath: String): Nav!
  navConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavFilter): NavConnection!
}

input DocumentFilter {
  blog: BlogFilter
  pages: PagesFilter
  nav: NavFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Blog | Pages | Nav | Folder

type Blog implements Node & Document {
  title: String
  description: String
  date: String
  draft: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BlogFilter {
  title: StringFilter
  description: StringFilter
  date: DatetimeFilter
  draft: BooleanFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Pages implements Node & Document {
  title: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type NavItems {
  title: String
  url: String
}

type Nav implements Node & Document {
  items: [NavItems]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavItemsFilter {
  title: StringFilter
  url: StringFilter
}

input NavFilter {
  items: NavItemsFilter
}

type NavConnectionEdges {
  cursor: String!
  node: Nav
}

type NavConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateNav(relativePath: String!, params: NavMutation!): Nav!
  createNav(relativePath: String!, params: NavMutation!): Nav!
}

input DocumentUpdateMutation {
  blog: BlogMutation
  pages: PagesMutation
  nav: NavMutation
  relativePath: String
}

input DocumentMutation {
  blog: BlogMutation
  pages: PagesMutation
  nav: NavMutation
}

input BlogMutation {
  title: String
  description: String
  date: String
  draft: Boolean
  body: JSON
}

input PagesMutation {
  title: String
  description: String
  body: JSON
}

input NavItemsMutation {
  title: String
  url: String
}

input NavMutation {
  items: [NavItemsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
